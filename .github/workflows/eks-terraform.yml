name: EKS Terraform Deployment
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/modules/**'
      - 'terraform/environments/dev/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/modules/**'
      - 'terraform/environments/dev/**'
  workflow_dispatch:
    inputs:
      action:
        description: "Specify the Terraform action: apply or destroy"
        required: true
        default: "apply"
      environment:
        description: "Environment to deploy (dev, staging, prod)"
        required: true
        default: "dev"

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-east-1

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
        terraform_wrapper: true

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true

    - name: Comment PR with Plan
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/environments/${{ github.event.inputs.environment || 'dev' }}/plan_output.txt', 'utf8');
          const output = `#### Terraform Plan for \`${{ github.event.inputs.environment || 'dev' }}\` 📝

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          ${plan}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/environments/${{ github.event.inputs.environment || 'dev' }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Execute Terraform Action
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          echo "Destroying infrastructure..."
          terraform destroy -auto-approve
        else
          echo "Applying infrastructure changes..."
          terraform apply -auto-approve tfplan
        fi

    - name: Terraform Output
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'destroy')
      run: terraform output -json > terraform_outputs.json

    - name: Upload Terraform Outputs
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'destroy')
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs
        path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/terraform_outputs.json
