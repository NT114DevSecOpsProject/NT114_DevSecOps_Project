name: SonarQube Analysis (frontend and api-gateway)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  sonar:
    name: SonarQube Scan
    # BẮT BUỘC: cho job chạy trên self-hosted runner của bạn
    runs-on:
      - self-hosted
      - linux
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # set trong repo secrets
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print runner info (debug)
        run: |
          echo "RUNNER: $(hostname)"; uname -a
          echo "Checking access to Sonar at $SONAR_HOST_URL"
          curl -v --max-time 10 $SONAR_HOST_URL/api/server/version || true
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin
      - name: Remove old sonar-scanner folder if exists
        run: rm -rf $HOME/sonar-scanner
      - name: Download Sonar Scanner
        run: |
          mkdir -p $HOME/sonar-scanner
          curl -sSLo $HOME/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q $HOME/sonar-scanner.zip -d $HOME/sonar-scanner
      - name: Setup Node and Install Frontend Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - name: Run SonarQube Scanner - FRONTEND
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=nt114-project \
            -Dsonar.sources=frontend/src \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=frontend/node_modules/**,frontend/dist/**,frontend/coverage/** \
            -Dsonar.tests=frontend/src/test \
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install API-GATEWAY Dependencies
        working-directory: microservices/api-gateway
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest and Generate Coverage for API-GATEWAY
        working-directory: microservices/api-gateway
        run: |
          pytest --cov=. --cov-report=xml || true
      - name: Run SonarQube Scanner - API-GATEWAY
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=nt114-api-gateway \
            -Dsonar.sources=./api-gateway \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN} \
            -Dsonar.language=py \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=microservices/api-gateway/requirements.txt,microservices/api-gateway/Dockerfile,microservices/api-gateway/coverage.xml \
            -Dsonar.python.coverage.reportPaths=microservices/api-gateway/coverage.xml 
#test
