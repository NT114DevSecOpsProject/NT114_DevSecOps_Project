name: SonarQube Analysis (frontend and microservices)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  sonar:
    name: SonarQube Scan
    runs-on:
      - self-hosted
      - linux
    env:
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print runner info (debug)
        run: |
          echo "RUNNER: $(hostname)"; uname -a
          echo "Checking access to Sonar at $SONAR_HOST_URL"
          curl -v --max-time 10 $SONAR_HOST_URL/api/server/version || true
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin
      - name: Remove old sonar-scanner folder if exists
        run: rm -rf $HOME/sonar-scanner
      - name: Download Sonar Scanner
        run: |
          mkdir -p $HOME/sonar-scanner
          curl -sSLo $HOME/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q $HOME/sonar-scanner.zip -d $HOME/sonar-scanner
      - name: Setup Node and Install Frontend Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      
      - name: Run Trivy Scan - FRONTEND Dependencies
        working-directory: frontend
        run: |
          echo "--- Starting Trivy Dependency Scan (Frontend) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln \
            package-lock.json || true
      - name: Run Trivy Scan - FRONTEND Source
        working-directory: frontend
        run: |
          echo "--- Starting Trivy Source Scan (Frontend) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln,secret,config,iac \
            . || true
      - name: Run SonarQube Scanner - FRONTEND
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=nt114-project \
            -Dsonar.sources=frontend/src \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=js \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=frontend/node_modules/**,frontend/dist/**,frontend/coverage/**,frontend/src/test/** \
            -Dsonar.tests=frontend/src/test \
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      # - name: Install system dependencies for PostgreSQL
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y libpq-dev
      # - name: Install Trivy CLI
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: "fs"
      #     input: ''
      
      # API-GATEWAY
      - name: Install API-GATEWAY Dependencies
        working-directory: microservices/api-gateway
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest and Generate Coverage for API-GATEWAY
        working-directory: microservices/api-gateway
        run: |
          python -m pytest --cov=. --cov-report=xml || true
      - name: Run SonarQube Scanner - API-GATEWAY
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=NT114-api-gateway \
            -Dsonar.sources=microservices/api-gateway \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=py \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=microservices/api-gateway/requirements.txt,microservices/api-gateway/Dockerfile,microservices/api-gateway/coverage.xml \
            -Dsonar.python.coverage.reportPaths=microservices/api-gateway/coverage.xml
      - name: Run Trivy Scan - API-GATEWAY Dependencies
        working-directory: microservices/api-gateway
        run: |
          echo "--- Trivy scan dependencies (API Gateway) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln \
            requirements.txt || true
      - name: Run Trivy Scan - API-GATEWAY Source
        working-directory: microservices/api-gateway
        run: |
          echo "--- Starting Trivy Source Scan (API Gateway) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln,secret,config,iac \
            . || true

      # EXERCISES-SERVICE
      - name: Install Exercises-Service Dependencies
        working-directory: microservices/exercises-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest and Generate Coverage for Exercises-Service
        working-directory: microservices/exercises-service
        run: |
          python -m pytest --cov=app --cov-report=xml || true
      - name: Run SonarQube Scanner - EXERCISES-SERVICE
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=NT114-exercises-service \
            -Dsonar.sources=microservices/exercises-service/app \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=py \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=microservices/exercises-service/requirements.txt,microservices/exercises-service/Dockerfile,microservices/exercises-service/coverage.xml \
            -Dsonar.python.coverage.reportPaths=microservices/exercises-service/coverage.xml
      - name: Run Trivy Scan - EXERCISES-SERVICE Dependencies
        working-directory: microservices/exercises-service
        run: |
          echo "--- Trivy scan dependencies (Exercises Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln \
            requirements.txt || true
      - name: Run Trivy Scan - EXERCISES-SERVICE Source
        working-directory: microservices/exercises-service
        run: |
          echo "--- Starting Trivy Source Scan (Exercises Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln,secret,config,iac \
            . || true

      # SCORES-SERVICE
      - name: Install Scores-Service Dependencies
        working-directory: microservices/scores-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest and Generate Coverage for Scores-Service
        working-directory: microservices/scores-service
        run: |
          python -m pytest --cov=app --cov-report=xml || true
      - name: Run SonarQube Scanner - SCORES-SERVICE
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=NT114-scores-service \
            -Dsonar.sources=microservices/scores-service/app \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=py \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=microservices/scores-service/requirements.txt,microservices/scores-service/Dockerfile,microservices/scores-service/coverage.xml \
            -Dsonar.python.coverage.reportPaths=microservices/scores-service/coverage.xml
      - name: Run Trivy Scan - SCORES-SERVICE Dependencies
        working-directory: microservices/scores-service
        run: |
          echo "--- Trivy scan dependencies (Scores Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln \
            requirements.txt || true
      - name: Run Trivy Scan - SCORES-SERVICE Source
        working-directory: microservices/scores-service
        run: |
          echo "--- Starting Trivy Source Scan (Scores Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln,secret,config,iac \
            . || true

      # USER-MANAGEMENT-SERVICE
      - name: Install User-Management-Service Dependencies
        working-directory: microservices/user-management-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Pytest and Generate Coverage for User-Management-Service
        working-directory: microservices/user-management-service
        run: |
          python -m pytest --cov=app --cov-report=xml || true
      - name: Run SonarQube Scanner - USER-MANAGEMENT-SERVICE
        run: |
          $HOME/sonar-scanner/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner \
            -Dsonar.projectKey=NT114-user-service \
            -Dsonar.sources=microservices/user-management-service/app \
            -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.token=${SONAR_TOKEN} \
            -Dsonar.language=py \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.exclusions=microservices/user-management-service/requirements.txt,microservices/user-management-service/Dockerfile,microservices/user-management-service/coverage.xml \
            -Dsonar.python.coverage.reportPaths=microservices/user-management-service/coverage.xml
      - name: Run Trivy Scan - USER-MANAGEMENT-SERVICE Dependencies
        working-directory: microservices/user-management-service
        run: |
          echo "--- Trivy scan dependencies (User Management Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln \
            requirements.txt || true
      - name: Run Trivy Scan - USER-MANAGEMENT-SERVICE Source
        working-directory: microservices/user-management-service
        run: |
          echo "--- Starting Trivy Source Scan (User Management Service) ---"
          trivy fs \
            --severity HIGH,CRITICAL \
            --format table \
            --security-checks vuln,secret,config,iac \
            . || true
###TEST SONARQUBE + TRIVY INTEGRATION